---
import Event from '../components/Event.astro';
import getEvents from '../getEvents.js';
const events = await getEvents();
const futureEvents = events.future();

// Group events by month and year
const groupedEvents = futureEvents.reduce((groups, event) => {
  const date = new Date(event.dateStart);
  const yearMonth = `${date.getFullYear()}-${date.getMonth() + 1}`;

  if (!groups[yearMonth]) {
    groups[yearMonth] = [];
  }

  groups[yearMonth].push(event);

  return groups;
}, {});

---

<!-- If there are no upcoming events -->
{Object.keys(groupedEvents).length === 0 && (
  <p>No upcoming events</p>
)}

<!-- If there are upcoming events -->
{Object.keys(groupedEvents).length > 0 && (
  Object.keys(groupedEvents).map((yearMonth) => {

    // Extract year and month from the key, and create a date object
    const [year, month] = yearMonth.split('-');
    const date = new Date(year, month - 1);

    // Get the full name of the month and determine whether to display the year
    const monthName = date.toLocaleString('default', { month: 'long' });
    const currentYear = new Date().getFullYear();
    const displayYear = year !== currentYear.toString() ? ` ${year}` : '';

    // Return a section for each group of events, with a heading and a list of events
    return (
      <section class="month" key={yearMonth}>
        <h2 class="month__heading">{`${monthName}${displayYear}`}</h2>
        <ul role="list" class="flow">
          {groupedEvents[yearMonth].map((event) => (
            event && <li key={event._id}>
              <Event event={event} />
            </li>
          ))}
        </ul>
      </section>
    );
  })
)}