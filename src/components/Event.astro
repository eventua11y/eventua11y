---
let { event } = Astro.props;
let { title, website, description, attendanceMode, location, callForSpeakers, children, type } = event;
import EventDate from './EventDate.astro';
import EventDelivery from './EventDelivery.astro';
import ChildEvent from './ChildEvent.astro';
import EventDebug from './EventDebug.astro';
---
<article
  class={`event content event--${event.type}`}
  itemscope
  itemtype="https://schema.org/Event"
  data-event-type="normal"
>
  <EventDebug event={event} />
  <h3 class="event__title">
    {website ? <a href={website} class="event__website" itemprop="url">{title}</a> : title}
  </h3>
  <span class="text-muted text-small"><EventDate event={event} /></span>
  <EventDelivery attendanceMode={attendanceMode} location={location} />
  {description && event.type !== 'theme' && (
      <details class="event__description flow">
        <summary>
          <i class="icon fa-solid fa-caret-right"></i> 
          Description
        </summary>
        <p itemprop="description">
          {description}
        </p>
      </details>
  )}
  {children && children.length > 0 && (
    <details class="event__children flow">
      <summary>
        <i class="icon fa-solid fa-caret-right"></i>
        Accessibility highlights{children.length > 0 ? ` (${children.length})` : ''}
      </summary>
      {children && children.length > 0 && (
        <ul role="list" class="flow">
          {children.map(child => (
            <li><ChildEvent event={child} /></li>
          ))}
        </ul>
      )}
    </details>
  )}
  <!-- End child events -->
  {callForSpeakers && (
    <div class="event__badges">
      <sl-badge variant="success" pill pulse>Call for speakers</sl-badge>
    </div>
  )}
</article>
